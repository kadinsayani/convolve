<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="277.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="277.00"> </text><svg id="frames" x="10" width="1180" total_samples="3554"><g><title>convolve`Convolve::Convolver::fft(std::__1::vector&lt;float, std::__1::allocator (1,850 samples, 52.05%)</title><rect x="0.9004%" y="181" width="52.0540%" height="15" fill="rgb(227,0,7)" fg:x="32" fg:w="1850"/><text x="1.1504%" y="191.50">convolve`Convolve::Convolver::fft(std::__1::vector&lt;float, std::__1::allocator</text></g><g><title>convolve`std::__1::vector&lt;float, std::__1::allocator&lt;float&gt;&gt;::operator[][abi:v160006] (1,218 samples, 34.27%)</title><rect x="52.9544%" y="181" width="34.2712%" height="15" fill="rgb(217,0,24)" fg:x="1882" fg:w="1218"/><text x="53.2044%" y="191.50">convolve`std::__1::vector&lt;float, std::__1::allocator&lt;flo..</text></g><g><title>convolve`DYLD-STUB$$void std::__1::allocator_traits&lt;std::__1::allocator&lt;float&gt;&gt;::construct[abi:v160006]&lt;float, float const&amp;, void&gt;(std::__1::allocator (13 samples, 0.37%)</title><rect x="87.2257%" y="149" width="0.3658%" height="15" fill="rgb(221,193,54)" fg:x="3100" fg:w="13"/><text x="87.4757%" y="159.50"></text></g><g><title>convolve`DYLD-STUB$$void std::__1::allocator_traits&lt;std::__1::allocator&lt;float&gt;&gt;::construct[abi:v160006]&lt;float, void&gt;(std::__1::allocator (1 samples, 0.03%)</title><rect x="87.5914%" y="149" width="0.0281%" height="15" fill="rgb(248,212,6)" fg:x="3113" fg:w="1"/><text x="87.8414%" y="159.50"></text></g><g><title>convolve`float* std::__1::__to_address[abi:v160006]&lt;float&gt; (9 samples, 0.25%)</title><rect x="87.6196%" y="149" width="0.2532%" height="15" fill="rgb(208,68,35)" fg:x="3114" fg:w="9"/><text x="87.8696%" y="159.50"></text></g><g><title>convolve`DYLD-STUB$$void std::__1::allocator&lt;float&gt;::construct[abi:v160006]&lt;float, float const&amp;&gt; (5 samples, 0.14%)</title><rect x="89.3641%" y="133" width="0.1407%" height="15" fill="rgb(232,128,0)" fg:x="3176" fg:w="5"/><text x="89.6141%" y="143.50"></text></g><g><title>convolve`DYLD-STUB$$void std::__1::allocator&lt;float&gt;::construct[abi:v160006]&lt;float&gt; (3 samples, 0.08%)</title><rect x="89.5048%" y="133" width="0.0844%" height="15" fill="rgb(207,160,47)" fg:x="3181" fg:w="3"/><text x="89.7548%" y="143.50"></text></g><g><title>convolve`std::__1::__compressed_pair&lt;float*, std::__1::allocator&lt;float&gt;&gt;::second[abi:v160006] (11 samples, 0.31%)</title><rect x="90.2645%" y="117" width="0.3095%" height="15" fill="rgb(228,23,34)" fg:x="3208" fg:w="11"/><text x="90.5145%" y="127.50"></text></g><g><title>convolve`std::__1::vector&lt;float, std::__1::allocator&lt;float&gt;&gt;::__alloc[abi:v160006] (41 samples, 1.15%)</title><rect x="89.5892%" y="133" width="1.1536%" height="15" fill="rgb(218,30,26)" fg:x="3184" fg:w="41"/><text x="89.8392%" y="143.50"></text></g><g><title>convolve`std::__1::__compressed_pair_elem&lt;std::__1::allocator&lt;float&gt;, 1, true&gt;::__get[abi:v160006] (6 samples, 0.17%)</title><rect x="90.5740%" y="117" width="0.1688%" height="15" fill="rgb(220,122,19)" fg:x="3219" fg:w="6"/><text x="90.8240%" y="127.50"></text></g><g><title>convolve`void std::__1::allocator&lt;float&gt;::construct[abi:v160006]&lt;float, float const&amp;&gt; (19 samples, 0.53%)</title><rect x="90.7428%" y="133" width="0.5346%" height="15" fill="rgb(250,228,42)" fg:x="3225" fg:w="19"/><text x="90.9928%" y="143.50"></text></g><g><title>convolve`void std::__1::allocator&lt;float&gt;::construct[abi:v160006]&lt;float&gt; (2 samples, 0.06%)</title><rect x="91.2774%" y="133" width="0.0563%" height="15" fill="rgb(240,193,28)" fg:x="3244" fg:w="2"/><text x="91.5274%" y="143.50"></text></g><g><title>convolve`void std::__1::allocator_traits&lt;std::__1::allocator&lt;float&gt;&gt;::construct[abi:v160006]&lt;float, float const&amp;, void&gt;(std::__1::allocator (16 samples, 0.45%)</title><rect x="91.3337%" y="133" width="0.4502%" height="15" fill="rgb(216,20,37)" fg:x="3246" fg:w="16"/><text x="91.5837%" y="143.50"></text></g><g><title>convolve`std::__1::vector&lt;float, std::__1::allocator&lt;float&gt;&gt;::vector (164 samples, 4.61%)</title><rect x="87.2257%" y="181" width="4.6145%" height="15" fill="rgb(206,188,39)" fg:x="3100" fg:w="164"/><text x="87.4757%" y="191.50">convo..</text></g><g><title>convolve`std::__1::vector&lt;float, std::__1::allocator&lt;float&gt;&gt;::vector (164 samples, 4.61%)</title><rect x="87.2257%" y="165" width="4.6145%" height="15" fill="rgb(217,207,13)" fg:x="3100" fg:w="164"/><text x="87.4757%" y="175.50">convo..</text></g><g><title>convolve`std::__1::vector&lt;float, std::__1::allocator&lt;float&gt;&gt;::__construct_at_end (141 samples, 3.97%)</title><rect x="87.8728%" y="149" width="3.9674%" height="15" fill="rgb(231,73,38)" fg:x="3123" fg:w="141"/><text x="88.1228%" y="159.50">conv..</text></g><g><title>convolve`void std::__1::allocator_traits&lt;std::__1::allocator&lt;float&gt;&gt;::construct[abi:v160006]&lt;float, void&gt;(std::__1::allocator (2 samples, 0.06%)</title><rect x="91.7839%" y="133" width="0.0563%" height="15" fill="rgb(225,20,46)" fg:x="3262" fg:w="2"/><text x="92.0339%" y="143.50"></text></g><g><title>convolve`std::__1::allocator_traits&lt;std::__1::allocator&lt;float&gt;&gt;::deallocate[abi:v160006](std::__1::allocator (1 samples, 0.03%)</title><rect x="91.8402%" y="133" width="0.0281%" height="15" fill="rgb(210,31,41)" fg:x="3264" fg:w="1"/><text x="92.0902%" y="143.50"></text></g><g><title>convolve`std::__1::allocator&lt;float&gt;::deallocate[abi:v160006] (1 samples, 0.03%)</title><rect x="91.8402%" y="117" width="0.0281%" height="15" fill="rgb(221,200,47)" fg:x="3264" fg:w="1"/><text x="92.0902%" y="127.50"></text></g><g><title>convolve`std::__1::__libcpp_deallocate[abi:v160006] (1 samples, 0.03%)</title><rect x="91.8402%" y="101" width="0.0281%" height="15" fill="rgb(226,26,5)" fg:x="3264" fg:w="1"/><text x="92.0902%" y="111.50"></text></g><g><title>convolve`void std::__1::__do_deallocate_handle_size[abi:v160006]&lt;&gt; (1 samples, 0.03%)</title><rect x="91.8402%" y="85" width="0.0281%" height="15" fill="rgb(249,33,26)" fg:x="3264" fg:w="1"/><text x="92.0902%" y="95.50"></text></g><g><title>convolve`void std::__1::__libcpp_operator_delete[abi:v160006]&lt;void*&gt; (1 samples, 0.03%)</title><rect x="91.8402%" y="69" width="0.0281%" height="15" fill="rgb(235,183,28)" fg:x="3264" fg:w="1"/><text x="92.0902%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (1 samples, 0.03%)</title><rect x="91.8402%" y="53" width="0.0281%" height="15" fill="rgb(221,5,38)" fg:x="3264" fg:w="1"/><text x="92.0902%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.03%)</title><rect x="91.8402%" y="37" width="0.0281%" height="15" fill="rgb(247,18,42)" fg:x="3264" fg:w="1"/><text x="92.0902%" y="47.50"></text></g><g><title>convolve`DYLD-STUB$$void std::__1::allocator_traits&lt;std::__1::allocator&lt;float&gt;&gt;::destroy[abi:v160006]&lt;float, void&gt;(std::__1::allocator (11 samples, 0.31%)</title><rect x="91.8683%" y="117" width="0.3095%" height="15" fill="rgb(241,131,45)" fg:x="3265" fg:w="11"/><text x="92.1183%" y="127.50"></text></g><g><title>convolve`float* std::__1::__to_address[abi:v160006]&lt;float&gt; (6 samples, 0.17%)</title><rect x="92.1778%" y="117" width="0.1688%" height="15" fill="rgb(249,31,29)" fg:x="3276" fg:w="6"/><text x="92.4278%" y="127.50"></text></g><g><title>convolve`std::__1::allocator&lt;float&gt;::destroy[abi:v160006] (11 samples, 0.31%)</title><rect x="93.8379%" y="101" width="0.3095%" height="15" fill="rgb(225,111,53)" fg:x="3335" fg:w="11"/><text x="94.0879%" y="111.50"></text></g><g><title>convolve`std::__1::__compressed_pair&lt;float*, std::__1::allocator&lt;float&gt;&gt;::second[abi:v160006] (8 samples, 0.23%)</title><rect x="94.6539%" y="85" width="0.2251%" height="15" fill="rgb(238,160,17)" fg:x="3364" fg:w="8"/><text x="94.9039%" y="95.50"></text></g><g><title>convolve`std::__1::vector&lt;float, std::__1::allocator&lt;float&gt;&gt;::__alloc[abi:v160006] (34 samples, 0.96%)</title><rect x="94.1474%" y="101" width="0.9567%" height="15" fill="rgb(214,148,48)" fg:x="3346" fg:w="34"/><text x="94.3974%" y="111.50"></text></g><g><title>convolve`std::__1::__compressed_pair_elem&lt;std::__1::allocator&lt;float&gt;, 1, true&gt;::__get[abi:v160006] (8 samples, 0.23%)</title><rect x="94.8790%" y="85" width="0.2251%" height="15" fill="rgb(232,36,49)" fg:x="3372" fg:w="8"/><text x="95.1290%" y="95.50"></text></g><g><title>convolve`Convolve::Convolver::convolve(std::__1::vector&lt;float, std::__1::allocator&lt;float&gt;&gt; const&amp;, std::__1::vector&lt;float, std::__1::allocator (3,394 samples, 95.50%)</title><rect x="0.0000%" y="197" width="95.4980%" height="15" fill="rgb(209,103,24)" fg:x="0" fg:w="3394"/><text x="0.2500%" y="207.50">convolve`Convolve::Convolver::convolve(std::__1::vector&lt;float, std::__1::allocator&lt;float&gt;&gt; const&amp;, std::__1::vector&lt;float, std::__1::allocator</text></g><g><title>convolve`std::__1::vector&lt;float, std::__1::allocator&lt;float&gt;&gt;::~vector[abi:v160006] (130 samples, 3.66%)</title><rect x="91.8402%" y="181" width="3.6579%" height="15" fill="rgb(229,88,8)" fg:x="3264" fg:w="130"/><text x="92.0902%" y="191.50">conv..</text></g><g><title>convolve`std::__1::vector&lt;float, std::__1::allocator&lt;float&gt;&gt;::~vector[abi:v160006] (130 samples, 3.66%)</title><rect x="91.8402%" y="165" width="3.6579%" height="15" fill="rgb(213,181,19)" fg:x="3264" fg:w="130"/><text x="92.0902%" y="175.50">conv..</text></g><g><title>convolve`std::__1::vector&lt;float, std::__1::allocator&lt;float&gt;&gt;::__destroy_vector::operator()[abi:v160006] (130 samples, 3.66%)</title><rect x="91.8402%" y="149" width="3.6579%" height="15" fill="rgb(254,191,54)" fg:x="3264" fg:w="130"/><text x="92.0902%" y="159.50">conv..</text></g><g><title>convolve`std::__1::vector&lt;float, std::__1::allocator&lt;float&gt;&gt;::__clear[abi:v160006] (129 samples, 3.63%)</title><rect x="91.8683%" y="133" width="3.6297%" height="15" fill="rgb(241,83,37)" fg:x="3265" fg:w="129"/><text x="92.1183%" y="143.50">conv..</text></g><g><title>convolve`std::__1::vector&lt;float, std::__1::allocator&lt;float&gt;&gt;::__base_destruct_at_end[abi:v160006] (112 samples, 3.15%)</title><rect x="92.3467%" y="117" width="3.1514%" height="15" fill="rgb(233,36,39)" fg:x="3282" fg:w="112"/><text x="92.5967%" y="127.50">con..</text></g><g><title>convolve`void std::__1::allocator_traits&lt;std::__1::allocator&lt;float&gt;&gt;::destroy[abi:v160006]&lt;float, void&gt;(std::__1::allocator (14 samples, 0.39%)</title><rect x="95.1041%" y="101" width="0.3939%" height="15" fill="rgb(226,3,54)" fg:x="3380" fg:w="14"/><text x="95.3541%" y="111.50"></text></g><g><title>convolve`DYLD-STUB$$void std::__1::allocator_traits&lt;std::__1::allocator&lt;float&gt;&gt;::construct[abi:v160006]&lt;float, void&gt;(std::__1::allocator (1 samples, 0.03%)</title><rect x="95.5824%" y="149" width="0.0281%" height="15" fill="rgb(245,192,40)" fg:x="3397" fg:w="1"/><text x="95.8324%" y="159.50"></text></g><g><title>convolve`float* std::__1::__to_address[abi:v160006]&lt;float&gt; (1 samples, 0.03%)</title><rect x="95.6106%" y="149" width="0.0281%" height="15" fill="rgb(238,167,29)" fg:x="3398" fg:w="1"/><text x="95.8606%" y="159.50"></text></g><g><title>convolve`std::__1::__split_buffer&lt;float, std::__1::allocator&lt;float&gt;&amp;&gt;::__alloc[abi:v160006] (1 samples, 0.03%)</title><rect x="95.8075%" y="133" width="0.0281%" height="15" fill="rgb(232,182,51)" fg:x="3405" fg:w="1"/><text x="96.0575%" y="143.50"></text></g><g><title>convolve`std::__1::__compressed_pair_elem&lt;std::__1::allocator&lt;float&gt;&amp;, 1, false&gt;::__get[abi:v160006] (1 samples, 0.03%)</title><rect x="95.8075%" y="117" width="0.0281%" height="15" fill="rgb(231,60,39)" fg:x="3405" fg:w="1"/><text x="96.0575%" y="127.50"></text></g><g><title>convolve`void std::__1::allocator&lt;float&gt;::construct[abi:v160006]&lt;float&gt; (1 samples, 0.03%)</title><rect x="95.8357%" y="133" width="0.0281%" height="15" fill="rgb(208,69,12)" fg:x="3406" fg:w="1"/><text x="96.0857%" y="143.50"></text></g><g><title>convolve`std::__1::vector&lt;float, std::__1::allocator&lt;float&gt;&gt;::resize (12 samples, 0.34%)</title><rect x="95.5824%" y="181" width="0.3376%" height="15" fill="rgb(235,93,37)" fg:x="3397" fg:w="12"/><text x="95.8324%" y="191.50"></text></g><g><title>convolve`std::__1::vector&lt;float, std::__1::allocator&lt;float&gt;&gt;::__append (12 samples, 0.34%)</title><rect x="95.5824%" y="165" width="0.3376%" height="15" fill="rgb(213,116,39)" fg:x="3397" fg:w="12"/><text x="95.8324%" y="175.50"></text></g><g><title>convolve`std::__1::__split_buffer&lt;float, std::__1::allocator&lt;float&gt;&amp;&gt;::__construct_at_end (10 samples, 0.28%)</title><rect x="95.6387%" y="149" width="0.2814%" height="15" fill="rgb(222,207,29)" fg:x="3399" fg:w="10"/><text x="95.8887%" y="159.50"></text></g><g><title>convolve`void std::__1::allocator_traits&lt;std::__1::allocator&lt;float&gt;&gt;::construct[abi:v160006]&lt;float, void&gt;(std::__1::allocator (2 samples, 0.06%)</title><rect x="95.8638%" y="133" width="0.0563%" height="15" fill="rgb(206,96,30)" fg:x="3407" fg:w="2"/><text x="96.1138%" y="143.50"></text></g><g><title>convolve`short* std::__1::__to_address[abi:v160006]&lt;short&gt; (1 samples, 0.03%)</title><rect x="95.9201%" y="149" width="0.0281%" height="15" fill="rgb(218,138,4)" fg:x="3409" fg:w="1"/><text x="96.1701%" y="159.50"></text></g><g><title>convolve`std::__1::vector&lt;short, std::__1::allocator&lt;short&gt;&gt;::__alloc[abi:v160006] (3 samples, 0.08%)</title><rect x="96.0889%" y="133" width="0.0844%" height="15" fill="rgb(250,191,14)" fg:x="3415" fg:w="3"/><text x="96.3389%" y="143.50"></text></g><g><title>convolve`std::__1::__compressed_pair&lt;short*, std::__1::allocator&lt;short&gt;&gt;::second[abi:v160006] (1 samples, 0.03%)</title><rect x="96.1452%" y="117" width="0.0281%" height="15" fill="rgb(239,60,40)" fg:x="3417" fg:w="1"/><text x="96.3952%" y="127.50"></text></g><g><title>convolve`void std::__1::allocator&lt;short&gt;::construct[abi:v160006]&lt;short&gt; (1 samples, 0.03%)</title><rect x="96.1733%" y="133" width="0.0281%" height="15" fill="rgb(206,27,48)" fg:x="3418" fg:w="1"/><text x="96.4233%" y="143.50"></text></g><g><title>convolve`std::__1::vector&lt;short, std::__1::allocator&lt;short&gt;&gt;::vector (11 samples, 0.31%)</title><rect x="95.9201%" y="181" width="0.3095%" height="15" fill="rgb(225,35,8)" fg:x="3409" fg:w="11"/><text x="96.1701%" y="191.50"></text></g><g><title>convolve`std::__1::vector&lt;short, std::__1::allocator&lt;short&gt;&gt;::vector (11 samples, 0.31%)</title><rect x="95.9201%" y="165" width="0.3095%" height="15" fill="rgb(250,213,24)" fg:x="3409" fg:w="11"/><text x="96.1701%" y="175.50"></text></g><g><title>convolve`std::__1::vector&lt;short, std::__1::allocator&lt;short&gt;&gt;::__construct_at_end (10 samples, 0.28%)</title><rect x="95.9482%" y="149" width="0.2814%" height="15" fill="rgb(247,123,22)" fg:x="3410" fg:w="10"/><text x="96.1982%" y="159.50"></text></g><g><title>convolve`void std::__1::allocator_traits&lt;std::__1::allocator&lt;short&gt;&gt;::construct[abi:v160006]&lt;short, void&gt;(std::__1::allocator (1 samples, 0.03%)</title><rect x="96.2015%" y="133" width="0.0281%" height="15" fill="rgb(231,138,38)" fg:x="3419" fg:w="1"/><text x="96.4515%" y="143.50"></text></g><g><title>convolve`DYLD-STUB$$void std::__1::allocator_traits&lt;std::__1::allocator&lt;short&gt;&gt;::destroy[abi:v160006]&lt;short, void&gt;(std::__1::allocator (2 samples, 0.06%)</title><rect x="96.2296%" y="117" width="0.0563%" height="15" fill="rgb(231,145,46)" fg:x="3420" fg:w="2"/><text x="96.4796%" y="127.50"></text></g><g><title>convolve`std::__1::allocator&lt;short&gt;::destroy[abi:v160006] (3 samples, 0.08%)</title><rect x="96.3703%" y="101" width="0.0844%" height="15" fill="rgb(251,118,11)" fg:x="3425" fg:w="3"/><text x="96.6203%" y="111.50"></text></g><g><title>convolve`std::__1::vector&lt;short, std::__1::allocator&lt;short&gt;&gt;::__alloc[abi:v160006] (1 samples, 0.03%)</title><rect x="96.4547%" y="101" width="0.0281%" height="15" fill="rgb(217,147,25)" fg:x="3428" fg:w="1"/><text x="96.7047%" y="111.50"></text></g><g><title>convolve`std::__1::__compressed_pair_elem&lt;std::__1::allocator&lt;short&gt;, 1, true&gt;::__get[abi:v160006] (1 samples, 0.03%)</title><rect x="96.4547%" y="85" width="0.0281%" height="15" fill="rgb(247,81,37)" fg:x="3428" fg:w="1"/><text x="96.7047%" y="95.50"></text></g><g><title>convolve`std::__1::vector&lt;short, std::__1::allocator&lt;short&gt;&gt;::~vector[abi:v160006] (10 samples, 0.28%)</title><rect x="96.2296%" y="181" width="0.2814%" height="15" fill="rgb(209,12,38)" fg:x="3420" fg:w="10"/><text x="96.4796%" y="191.50"></text></g><g><title>convolve`std::__1::vector&lt;short, std::__1::allocator&lt;short&gt;&gt;::~vector[abi:v160006] (10 samples, 0.28%)</title><rect x="96.2296%" y="165" width="0.2814%" height="15" fill="rgb(227,1,9)" fg:x="3420" fg:w="10"/><text x="96.4796%" y="175.50"></text></g><g><title>convolve`std::__1::vector&lt;short, std::__1::allocator&lt;short&gt;&gt;::__destroy_vector::operator()[abi:v160006] (10 samples, 0.28%)</title><rect x="96.2296%" y="149" width="0.2814%" height="15" fill="rgb(248,47,43)" fg:x="3420" fg:w="10"/><text x="96.4796%" y="159.50"></text></g><g><title>convolve`std::__1::vector&lt;short, std::__1::allocator&lt;short&gt;&gt;::__clear[abi:v160006] (10 samples, 0.28%)</title><rect x="96.2296%" y="133" width="0.2814%" height="15" fill="rgb(221,10,30)" fg:x="3420" fg:w="10"/><text x="96.4796%" y="143.50"></text></g><g><title>convolve`std::__1::vector&lt;short, std::__1::allocator&lt;short&gt;&gt;::__base_destruct_at_end[abi:v160006] (8 samples, 0.23%)</title><rect x="96.2859%" y="117" width="0.2251%" height="15" fill="rgb(210,229,1)" fg:x="3422" fg:w="8"/><text x="96.5359%" y="127.50"></text></g><g><title>convolve`void std::__1::allocator_traits&lt;std::__1::allocator&lt;short&gt;&gt;::destroy[abi:v160006]&lt;short, void&gt;(std::__1::allocator (1 samples, 0.03%)</title><rect x="96.4828%" y="101" width="0.0281%" height="15" fill="rgb(222,148,37)" fg:x="3429" fg:w="1"/><text x="96.7328%" y="111.50"></text></g><g><title>libsystem_c.dylib`fopen (1 samples, 0.03%)</title><rect x="96.5110%" y="181" width="0.0281%" height="15" fill="rgb(234,67,33)" fg:x="3430" fg:w="1"/><text x="96.7610%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`__open_nocancel (1 samples, 0.03%)</title><rect x="96.5110%" y="165" width="0.0281%" height="15" fill="rgb(247,98,35)" fg:x="3430" fg:w="1"/><text x="96.7610%" y="175.50"></text></g><g><title>convolve`Convolve::WavFile::read (39 samples, 1.10%)</title><rect x="95.4980%" y="197" width="1.0974%" height="15" fill="rgb(247,138,52)" fg:x="3394" fg:w="39"/><text x="95.7480%" y="207.50"></text></g><g><title>libsystem_c.dylib`fread (2 samples, 0.06%)</title><rect x="96.5391%" y="181" width="0.0563%" height="15" fill="rgb(213,79,30)" fg:x="3431" fg:w="2"/><text x="96.7891%" y="191.50"></text></g><g><title>libsystem_c.dylib`__fread (2 samples, 0.06%)</title><rect x="96.5391%" y="165" width="0.0563%" height="15" fill="rgb(246,177,23)" fg:x="3431" fg:w="2"/><text x="96.7891%" y="175.50"></text></g><g><title>libsystem_c.dylib`__srefill1 (2 samples, 0.06%)</title><rect x="96.5391%" y="149" width="0.0563%" height="15" fill="rgb(230,62,27)" fg:x="3431" fg:w="2"/><text x="96.7891%" y="159.50"></text></g><g><title>libsystem_c.dylib`_sread (2 samples, 0.06%)</title><rect x="96.5391%" y="133" width="0.0563%" height="15" fill="rgb(216,154,8)" fg:x="3431" fg:w="2"/><text x="96.7891%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`__read_nocancel (2 samples, 0.06%)</title><rect x="96.5391%" y="117" width="0.0563%" height="15" fill="rgb(244,35,45)" fg:x="3431" fg:w="2"/><text x="96.7891%" y="127.50"></text></g><g><title>convolve`float const&amp; std::__1::max[abi:v160006]&lt;float&gt; (2 samples, 0.06%)</title><rect x="96.8205%" y="181" width="0.0563%" height="15" fill="rgb(251,115,12)" fg:x="3441" fg:w="2"/><text x="97.0705%" y="191.50"></text></g><g><title>convolve`float const&amp; std::__1::max[abi:v160006]&lt;float, std::__1::__less&lt;float, float&gt;&gt;(float const&amp;, float const&amp;, std::__1::__less (1 samples, 0.03%)</title><rect x="96.8486%" y="165" width="0.0281%" height="15" fill="rgb(240,54,50)" fg:x="3442" fg:w="1"/><text x="97.0986%" y="175.50"></text></g><g><title>convolve`float const&amp; std::__1::min[abi:v160006]&lt;float&gt; (7 samples, 0.20%)</title><rect x="96.8768%" y="181" width="0.1970%" height="15" fill="rgb(233,84,52)" fg:x="3443" fg:w="7"/><text x="97.1268%" y="191.50"></text></g><g><title>convolve`std::__1::__less&lt;float, float&gt;::operator()[abi:v160006] (5 samples, 0.14%)</title><rect x="96.9330%" y="165" width="0.1407%" height="15" fill="rgb(207,117,47)" fg:x="3445" fg:w="5"/><text x="97.1830%" y="175.50"></text></g><g><title>convolve`std::__1::__less&lt;float, float&gt;::operator()[abi:v160006] (1 samples, 0.03%)</title><rect x="97.0737%" y="149" width="0.0281%" height="15" fill="rgb(249,43,39)" fg:x="3450" fg:w="1"/><text x="97.3237%" y="159.50"></text></g><g><title>convolve`bool std::__1::operator==[abi:v160006]&lt;float*&gt;(std::__1::__wrap_iter&lt;float*&gt; const&amp;, std::__1::__wrap_iter (2 samples, 0.06%)</title><rect x="97.2425%" y="117" width="0.0563%" height="15" fill="rgb(209,38,44)" fg:x="3456" fg:w="2"/><text x="97.4925%" y="127.50"></text></g><g><title>convolve`std::__1::__wrap_iter&lt;float*&gt; std::__1::__max_element[abi:v160006]&lt;std::__1::__less&lt;float, float&gt;&amp;, std::__1::__wrap_iter&lt;float*&gt;&gt;(std::__1::__wrap_iter&lt;float*&gt;, std::__1::__wrap_iter&lt;float*&gt;, std::__1::__less (8 samples, 0.23%)</title><rect x="97.1019%" y="149" width="0.2251%" height="15" fill="rgb(236,212,23)" fg:x="3451" fg:w="8"/><text x="97.3519%" y="159.50"></text></g><g><title>convolve`bool std::__1::operator!=[abi:v160006]&lt;float*&gt;(std::__1::__wrap_iter&lt;float*&gt; const&amp;, std::__1::__wrap_iter (3 samples, 0.08%)</title><rect x="97.2425%" y="133" width="0.0844%" height="15" fill="rgb(242,79,21)" fg:x="3456" fg:w="3"/><text x="97.4925%" y="143.50"></text></g><g><title>convolve`std::__1::__wrap_iter&lt;float*&gt;::base[abi:v160006] (1 samples, 0.03%)</title><rect x="97.2988%" y="117" width="0.0281%" height="15" fill="rgb(211,96,35)" fg:x="3458" fg:w="1"/><text x="97.5488%" y="127.50"></text></g><g><title>convolve`std::__1::__wrap_iter&lt;float*&gt; std::__1::max_element[abi:v160006]&lt;std::__1::__wrap_iter&lt;float*&gt;&gt;(std::__1::__wrap_iter&lt;float*&gt;, std::__1::__wrap_iter (11 samples, 0.31%)</title><rect x="97.0737%" y="181" width="0.3095%" height="15" fill="rgb(253,215,40)" fg:x="3450" fg:w="11"/><text x="97.3237%" y="191.50"></text></g><g><title>convolve`std::__1::__wrap_iter&lt;float*&gt; std::__1::max_element[abi:v160006]&lt;std::__1::__wrap_iter&lt;float*&gt;, std::__1::__less&lt;float, float&gt;&gt;(std::__1::__wrap_iter&lt;float*&gt;, std::__1::__wrap_iter&lt;float*&gt;, std::__1::__less (11 samples, 0.31%)</title><rect x="97.0737%" y="165" width="0.3095%" height="15" fill="rgb(211,81,21)" fg:x="3450" fg:w="11"/><text x="97.3237%" y="175.50"></text></g><g><title>convolve`std::__1::__wrap_iter&lt;float*&gt;::operator++[abi:v160006] (2 samples, 0.06%)</title><rect x="97.3270%" y="149" width="0.0563%" height="15" fill="rgb(208,190,38)" fg:x="3459" fg:w="2"/><text x="97.5770%" y="159.50"></text></g><g><title>convolve`bool std::__1::operator==[abi:v160006]&lt;float*&gt;(std::__1::__wrap_iter&lt;float*&gt; const&amp;, std::__1::__wrap_iter (2 samples, 0.06%)</title><rect x="97.4395%" y="101" width="0.0563%" height="15" fill="rgb(235,213,38)" fg:x="3463" fg:w="2"/><text x="97.6895%" y="111.50"></text></g><g><title>convolve`bool std::__1::operator!=[abi:v160006]&lt;float*&gt;(std::__1::__wrap_iter&lt;float*&gt; const&amp;, std::__1::__wrap_iter (8 samples, 0.23%)</title><rect x="97.4114%" y="117" width="0.2251%" height="15" fill="rgb(237,122,38)" fg:x="3462" fg:w="8"/><text x="97.6614%" y="127.50"></text></g><g><title>convolve`std::__1::__wrap_iter&lt;float*&gt;::base[abi:v160006] (5 samples, 0.14%)</title><rect x="97.4958%" y="101" width="0.1407%" height="15" fill="rgb(244,218,35)" fg:x="3465" fg:w="5"/><text x="97.7458%" y="111.50"></text></g><g><title>convolve`decltype(std::declval&lt;std::__1::__identity&amp;&gt;()(std::declval&lt;float&amp;&gt;())) std::__1::__invoke[abi:v160006]&lt;std::__1::__identity&amp;, float&amp;&gt; (3 samples, 0.08%)</title><rect x="97.6365%" y="117" width="0.0844%" height="15" fill="rgb(240,68,47)" fg:x="3470" fg:w="3"/><text x="97.8865%" y="127.50"></text></g><g><title>convolve`decltype(std::declval&lt;std::__1::__less&lt;float, float&gt;&amp;&gt;()(std::declval&lt;float&amp;&gt;(), std::declval&lt;float&amp;&gt;())) std::__1::__invoke[abi:v160006]&lt;std::__1::__less&lt;float, float&gt;&amp;, float&amp;, float&amp;&gt;(std::__1::__less (2 samples, 0.06%)</title><rect x="97.7209%" y="117" width="0.0563%" height="15" fill="rgb(210,16,53)" fg:x="3473" fg:w="2"/><text x="97.9709%" y="127.50"></text></g><g><title>convolve`float&amp; std::__1::__identity::operator()&lt;float&amp;&gt; (3 samples, 0.08%)</title><rect x="97.7772%" y="117" width="0.0844%" height="15" fill="rgb(235,124,12)" fg:x="3475" fg:w="3"/><text x="98.0272%" y="127.50"></text></g><g><title>convolve`std::__1::__wrap_iter&lt;float*&gt; std::__1::__min_element[abi:v160006]&lt;std::__1::__less&lt;float, float&gt;&amp;, std::__1::__wrap_iter&lt;float*&gt;, std::__1::__wrap_iter&lt;float*&gt;, std::__1::__identity&gt;(std::__1::__wrap_iter&lt;float*&gt;, std::__1::__wrap_iter&lt;float*&gt;, std::__1::__less (18 samples, 0.51%)</title><rect x="97.3832%" y="133" width="0.5065%" height="15" fill="rgb(224,169,11)" fg:x="3461" fg:w="18"/><text x="97.6332%" y="143.50"></text></g><g><title>convolve`std::__1::__less&lt;float, float&gt;::operator()[abi:v160006] (1 samples, 0.03%)</title><rect x="97.8616%" y="117" width="0.0281%" height="15" fill="rgb(250,166,2)" fg:x="3478" fg:w="1"/><text x="98.1116%" y="127.50"></text></g><g><title>convolve`std::__1::__wrap_iter&lt;float*&gt; std::__1::min_element[abi:v160006]&lt;std::__1::__wrap_iter&lt;float*&gt;&gt;(std::__1::__wrap_iter&lt;float*&gt;, std::__1::__wrap_iter (19 samples, 0.53%)</title><rect x="97.3832%" y="181" width="0.5346%" height="15" fill="rgb(242,216,29)" fg:x="3461" fg:w="19"/><text x="97.6332%" y="191.50"></text></g><g><title>convolve`std::__1::__wrap_iter&lt;float*&gt; std::__1::min_element[abi:v160006]&lt;std::__1::__wrap_iter&lt;float*&gt;, std::__1::__less&lt;float, float&gt;&gt;(std::__1::__wrap_iter&lt;float*&gt;, std::__1::__wrap_iter&lt;float*&gt;, std::__1::__less (19 samples, 0.53%)</title><rect x="97.3832%" y="165" width="0.5346%" height="15" fill="rgb(230,116,27)" fg:x="3461" fg:w="19"/><text x="97.6332%" y="175.50"></text></g><g><title>convolve`std::__1::__wrap_iter&lt;float*&gt; std::__1::__min_element[abi:v160006]&lt;std::__1::__less&lt;float, float&gt;&amp;, std::__1::__wrap_iter&lt;float*&gt;, std::__1::__wrap_iter&lt;float*&gt;&gt;(std::__1::__wrap_iter&lt;float*&gt;, std::__1::__wrap_iter&lt;float*&gt;, std::__1::__less (19 samples, 0.53%)</title><rect x="97.3832%" y="149" width="0.5346%" height="15" fill="rgb(228,99,48)" fg:x="3461" fg:w="19"/><text x="97.6332%" y="159.50"></text></g><g><title>convolve`std::__1::__wrap_iter&lt;float*&gt;::operator++[abi:v160006] (1 samples, 0.03%)</title><rect x="97.8897%" y="133" width="0.0281%" height="15" fill="rgb(253,11,6)" fg:x="3479" fg:w="1"/><text x="98.1397%" y="143.50"></text></g><g><title>convolve`DYLD-STUB$$void std::__1::allocator_traits&lt;std::__1::allocator&lt;short&gt;&gt;::construct[abi:v160006]&lt;short, void&gt;(std::__1::allocator (1 samples, 0.03%)</title><rect x="97.9178%" y="149" width="0.0281%" height="15" fill="rgb(247,143,39)" fg:x="3480" fg:w="1"/><text x="98.1678%" y="159.50"></text></g><g><title>convolve`DYLD-STUB$$void std::__1::allocator&lt;short&gt;::construct[abi:v160006]&lt;short&gt; (1 samples, 0.03%)</title><rect x="98.1148%" y="133" width="0.0281%" height="15" fill="rgb(236,97,10)" fg:x="3487" fg:w="1"/><text x="98.3648%" y="143.50"></text></g><g><title>convolve`std::__1::vector&lt;short, std::__1::allocator&lt;short&gt;&gt;::__alloc[abi:v160006] (2 samples, 0.06%)</title><rect x="98.1429%" y="133" width="0.0563%" height="15" fill="rgb(233,208,19)" fg:x="3488" fg:w="2"/><text x="98.3929%" y="143.50"></text></g><g><title>convolve`std::__1::__compressed_pair&lt;short*, std::__1::allocator&lt;short&gt;&gt;::second[abi:v160006] (1 samples, 0.03%)</title><rect x="98.1711%" y="117" width="0.0281%" height="15" fill="rgb(216,164,2)" fg:x="3489" fg:w="1"/><text x="98.4211%" y="127.50"></text></g><g><title>convolve`std::__1::vector&lt;short, std::__1::allocator&lt;short&gt;&gt;::__construct_at_end (10 samples, 0.28%)</title><rect x="97.9460%" y="149" width="0.2814%" height="15" fill="rgb(220,129,5)" fg:x="3481" fg:w="10"/><text x="98.1960%" y="159.50"></text></g><g><title>convolve`void std::__1::allocator_traits&lt;std::__1::allocator&lt;short&gt;&gt;::construct[abi:v160006]&lt;short, void&gt;(std::__1::allocator (1 samples, 0.03%)</title><rect x="98.1992%" y="133" width="0.0281%" height="15" fill="rgb(242,17,10)" fg:x="3490" fg:w="1"/><text x="98.4492%" y="143.50"></text></g><g><title>convolve`std::__1::vector&lt;short, std::__1::allocator&lt;short&gt;&gt;::vector (12 samples, 0.34%)</title><rect x="97.9178%" y="181" width="0.3376%" height="15" fill="rgb(242,107,0)" fg:x="3480" fg:w="12"/><text x="98.1678%" y="191.50"></text></g><g><title>convolve`std::__1::vector&lt;short, std::__1::allocator&lt;short&gt;&gt;::vector (12 samples, 0.34%)</title><rect x="97.9178%" y="165" width="0.3376%" height="15" fill="rgb(251,28,31)" fg:x="3480" fg:w="12"/><text x="98.1678%" y="175.50"></text></g><g><title>convolve`std::__1::vector&lt;short, std::__1::allocator&lt;short&gt;&gt;::__vallocate[abi:v160006] (1 samples, 0.03%)</title><rect x="98.2273%" y="149" width="0.0281%" height="15" fill="rgb(233,223,10)" fg:x="3491" fg:w="1"/><text x="98.4773%" y="159.50"></text></g><g><title>convolve`std::__1::__allocation_result&lt;std::__1::allocator_traits&lt;std::__1::allocator&lt;short&gt;&gt;::pointer&gt; std::__1::__allocate_at_least[abi:v160006]&lt;std::__1::allocator&lt;short&gt;&gt;(std::__1::allocator (1 samples, 0.03%)</title><rect x="98.2273%" y="133" width="0.0281%" height="15" fill="rgb(215,21,27)" fg:x="3491" fg:w="1"/><text x="98.4773%" y="143.50"></text></g><g><title>convolve`std::__1::allocator&lt;short&gt;::allocate[abi:v160006] (1 samples, 0.03%)</title><rect x="98.2273%" y="117" width="0.0281%" height="15" fill="rgb(232,23,21)" fg:x="3491" fg:w="1"/><text x="98.4773%" y="127.50"></text></g><g><title>convolve`std::__1::__libcpp_allocate[abi:v160006] (1 samples, 0.03%)</title><rect x="98.2273%" y="101" width="0.0281%" height="15" fill="rgb(244,5,23)" fg:x="3491" fg:w="1"/><text x="98.4773%" y="111.50"></text></g><g><title>convolve`void* std::__1::__libcpp_operator_new[abi:v160006]&lt;unsigned long&gt; (1 samples, 0.03%)</title><rect x="98.2273%" y="85" width="0.0281%" height="15" fill="rgb(226,81,46)" fg:x="3491" fg:w="1"/><text x="98.4773%" y="95.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (1 samples, 0.03%)</title><rect x="98.2273%" y="69" width="0.0281%" height="15" fill="rgb(247,70,30)" fg:x="3491" fg:w="1"/><text x="98.4773%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.03%)</title><rect x="98.2273%" y="53" width="0.0281%" height="15" fill="rgb(212,68,19)" fg:x="3491" fg:w="1"/><text x="98.4773%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`medium_malloc_should_clear (1 samples, 0.03%)</title><rect x="98.2273%" y="37" width="0.0281%" height="15" fill="rgb(240,187,13)" fg:x="3491" fg:w="1"/><text x="98.4773%" y="47.50"></text></g><g><title>convolve`std::__1::vector&lt;short, std::__1::allocator&lt;short&gt;&gt;::__alloc[abi:v160006] (1 samples, 0.03%)</title><rect x="98.4806%" y="101" width="0.0281%" height="15" fill="rgb(223,113,26)" fg:x="3500" fg:w="1"/><text x="98.7306%" y="111.50"></text></g><g><title>convolve`std::__1::__compressed_pair&lt;short*, std::__1::allocator&lt;short&gt;&gt;::second[abi:v160006] (1 samples, 0.03%)</title><rect x="98.4806%" y="85" width="0.0281%" height="15" fill="rgb(206,192,2)" fg:x="3500" fg:w="1"/><text x="98.7306%" y="95.50"></text></g><g><title>convolve`Convolve::WavFile::write (69 samples, 1.94%)</title><rect x="96.5954%" y="197" width="1.9415%" height="15" fill="rgb(241,108,4)" fg:x="3433" fg:w="69"/><text x="96.8454%" y="207.50">c..</text></g><g><title>convolve`std::__1::vector&lt;short, std::__1::allocator&lt;short&gt;&gt;::~vector[abi:v160006] (10 samples, 0.28%)</title><rect x="98.2555%" y="181" width="0.2814%" height="15" fill="rgb(247,173,49)" fg:x="3492" fg:w="10"/><text x="98.5055%" y="191.50"></text></g><g><title>convolve`std::__1::vector&lt;short, std::__1::allocator&lt;short&gt;&gt;::~vector[abi:v160006] (10 samples, 0.28%)</title><rect x="98.2555%" y="165" width="0.2814%" height="15" fill="rgb(224,114,35)" fg:x="3492" fg:w="10"/><text x="98.5055%" y="175.50"></text></g><g><title>convolve`std::__1::vector&lt;short, std::__1::allocator&lt;short&gt;&gt;::__destroy_vector::operator()[abi:v160006] (10 samples, 0.28%)</title><rect x="98.2555%" y="149" width="0.2814%" height="15" fill="rgb(245,159,27)" fg:x="3492" fg:w="10"/><text x="98.5055%" y="159.50"></text></g><g><title>convolve`std::__1::vector&lt;short, std::__1::allocator&lt;short&gt;&gt;::__clear[abi:v160006] (10 samples, 0.28%)</title><rect x="98.2555%" y="133" width="0.2814%" height="15" fill="rgb(245,172,44)" fg:x="3492" fg:w="10"/><text x="98.5055%" y="143.50"></text></g><g><title>convolve`std::__1::vector&lt;short, std::__1::allocator&lt;short&gt;&gt;::__base_destruct_at_end[abi:v160006] (10 samples, 0.28%)</title><rect x="98.2555%" y="117" width="0.2814%" height="15" fill="rgb(236,23,11)" fg:x="3492" fg:w="10"/><text x="98.5055%" y="127.50"></text></g><g><title>convolve`void std::__1::allocator_traits&lt;std::__1::allocator&lt;short&gt;&gt;::destroy[abi:v160006]&lt;short, void&gt;(std::__1::allocator (1 samples, 0.03%)</title><rect x="98.5087%" y="101" width="0.0281%" height="15" fill="rgb(205,117,38)" fg:x="3501" fg:w="1"/><text x="98.7587%" y="111.50"></text></g><g><title>convolve`DYLD-STUB$$void std::__1::allocator_traits&lt;std::__1::allocator&lt;float&gt;&gt;::destroy[abi:v160006]&lt;float, void&gt;(std::__1::allocator (1 samples, 0.03%)</title><rect x="98.5369%" y="101" width="0.0281%" height="15" fill="rgb(237,72,25)" fg:x="3502" fg:w="1"/><text x="98.7869%" y="111.50"></text></g><g><title>convolve`float* std::__1::__to_address[abi:v160006]&lt;float&gt; (1 samples, 0.03%)</title><rect x="98.5650%" y="101" width="0.0281%" height="15" fill="rgb(244,70,9)" fg:x="3503" fg:w="1"/><text x="98.8150%" y="111.50"></text></g><g><title>convolve`std::__1::__compressed_pair&lt;float*, std::__1::allocator&lt;float&gt;&gt;::second[abi:v160006] (2 samples, 0.06%)</title><rect x="98.9026%" y="69" width="0.0563%" height="15" fill="rgb(217,125,39)" fg:x="3515" fg:w="2"/><text x="99.1526%" y="79.50"></text></g><g><title>convolve`std::__1::vector&lt;float, std::__1::allocator&lt;float&gt;&gt;::__alloc[abi:v160006] (8 samples, 0.23%)</title><rect x="98.8182%" y="85" width="0.2251%" height="15" fill="rgb(235,36,10)" fg:x="3512" fg:w="8"/><text x="99.0682%" y="95.50"></text></g><g><title>convolve`std::__1::__compressed_pair_elem&lt;std::__1::allocator&lt;float&gt;, 1, true&gt;::__get[abi:v160006] (3 samples, 0.08%)</title><rect x="98.9589%" y="69" width="0.0844%" height="15" fill="rgb(251,123,47)" fg:x="3517" fg:w="3"/><text x="99.2089%" y="79.50"></text></g><g><title>convolve`Convolve::WavFile::~WavFile (19 samples, 0.53%)</title><rect x="98.5369%" y="197" width="0.5346%" height="15" fill="rgb(221,13,13)" fg:x="3502" fg:w="19"/><text x="98.7869%" y="207.50"></text></g><g><title>convolve`Convolve::WavFile::~WavFile (19 samples, 0.53%)</title><rect x="98.5369%" y="181" width="0.5346%" height="15" fill="rgb(238,131,9)" fg:x="3502" fg:w="19"/><text x="98.7869%" y="191.50"></text></g><g><title>convolve`std::__1::vector&lt;float, std::__1::allocator&lt;float&gt;&gt;::~vector[abi:v160006] (19 samples, 0.53%)</title><rect x="98.5369%" y="165" width="0.5346%" height="15" fill="rgb(211,50,8)" fg:x="3502" fg:w="19"/><text x="98.7869%" y="175.50"></text></g><g><title>convolve`std::__1::vector&lt;float, std::__1::allocator&lt;float&gt;&gt;::~vector[abi:v160006] (19 samples, 0.53%)</title><rect x="98.5369%" y="149" width="0.5346%" height="15" fill="rgb(245,182,24)" fg:x="3502" fg:w="19"/><text x="98.7869%" y="159.50"></text></g><g><title>convolve`std::__1::vector&lt;float, std::__1::allocator&lt;float&gt;&gt;::__destroy_vector::operator()[abi:v160006] (19 samples, 0.53%)</title><rect x="98.5369%" y="133" width="0.5346%" height="15" fill="rgb(242,14,37)" fg:x="3502" fg:w="19"/><text x="98.7869%" y="143.50"></text></g><g><title>convolve`std::__1::vector&lt;float, std::__1::allocator&lt;float&gt;&gt;::__clear[abi:v160006] (19 samples, 0.53%)</title><rect x="98.5369%" y="117" width="0.5346%" height="15" fill="rgb(246,228,12)" fg:x="3502" fg:w="19"/><text x="98.7869%" y="127.50"></text></g><g><title>convolve`std::__1::vector&lt;float, std::__1::allocator&lt;float&gt;&gt;::__base_destruct_at_end[abi:v160006] (17 samples, 0.48%)</title><rect x="98.5931%" y="101" width="0.4783%" height="15" fill="rgb(213,55,15)" fg:x="3504" fg:w="17"/><text x="98.8431%" y="111.50"></text></g><g><title>convolve`void std::__1::allocator_traits&lt;std::__1::allocator&lt;float&gt;&gt;::destroy[abi:v160006]&lt;float, void&gt;(std::__1::allocator (1 samples, 0.03%)</title><rect x="99.0433%" y="85" width="0.0281%" height="15" fill="rgb(209,9,3)" fg:x="3520" fg:w="1"/><text x="99.2933%" y="95.50"></text></g><g><title>convolve`std::__1::vector&lt;float, std::__1::allocator&lt;float&gt;&gt;::operator[][abi:v160006] (28 samples, 0.79%)</title><rect x="99.0715%" y="197" width="0.7878%" height="15" fill="rgb(230,59,30)" fg:x="3521" fg:w="28"/><text x="99.3215%" y="207.50"></text></g><g><title>dyld`start (3,552 samples, 99.94%)</title><rect x="0.0000%" y="229" width="99.9437%" height="15" fill="rgb(209,121,21)" fg:x="0" fg:w="3552"/><text x="0.2500%" y="239.50">dyld`start</text></g><g><title>convolve`main (3,552 samples, 99.94%)</title><rect x="0.0000%" y="213" width="99.9437%" height="15" fill="rgb(220,109,13)" fg:x="0" fg:w="3552"/><text x="0.2500%" y="223.50">convolve`main</text></g><g><title>convolve`std::__1::vector&lt;float, std::__1::allocator&lt;float&gt;&gt;::size[abi:v160006] (3 samples, 0.08%)</title><rect x="99.8593%" y="197" width="0.0844%" height="15" fill="rgb(232,18,1)" fg:x="3549" fg:w="3"/><text x="100.1093%" y="207.50"></text></g><g><title>all (3,554 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(215,41,42)" fg:x="0" fg:w="3554"/><text x="0.2500%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`__exit (2 samples, 0.06%)</title><rect x="99.9437%" y="229" width="0.0563%" height="15" fill="rgb(224,123,36)" fg:x="3552" fg:w="2"/><text x="100.1937%" y="239.50"></text></g></svg></svg>